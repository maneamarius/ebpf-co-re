---
name: CI
on:
  pull_request: null
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Run build.sh
        run: |
          os=core
          ./build.sh 5.15.27 glibc "${os}"
      - name: List Artifacts
        run: |
          ls -lah artifacts
          test -f artifacts/netdata_ebpf-*.tar.xz
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: artifacts-5.15.27-glibc
          path: artifacts

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: "oraclelinux8", url: "https://cache.netdata.cloud/vagrant/oraclelinux/oraclelinux8/oraclelinux8.json"}
          - {name: "ubuntu2110", url: "https://cache.netdata.cloud/vagrant/ubuntu/ubuntu2110/ubuntu2110.json"}
    runs-on: macos-10.15
    needs: build-artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Retrieve Dist Tarball
        id: fetch-dist
        uses: actions/download-artifact@v3
        with:
          name: artifacts-5.15.27-glibc
          path: src
      - name: Update vagrant and virtualbox
        working-directory: src
        run: |
          ls -la
          ls -la netdata_ebpf-co-re-glibc.tar.xz
          tar -xzf netdata_ebpf-co-re-glibc.tar.xz
          echo "finished extracting artifact"
          ls -la
          echo "finished listing"
          ls -la includes
          echo "finished listing includes"
#          make all
#          brew upgrade vagrant
#          brew upgrade --cask virtualbox
      - name: Create VM
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 3
          command: |
            vagrant box add ${{ matrix.url }} --name ${{ matrix.name }}
            vagrant destroy ${{ matrix.name }} -f || true
            vagrant init ${{ matrix.name }} ${{ matrix.url }} --force
            vagrant up
      - name: Build test binaries
        run: |
          vagrant ssh -- -t "sudo /vagrant/tools/install-test-dependencies.sh"
          vagrant ssh -- -t "make all -C /vagrant/src"
      - name: Run Test 'cachestat'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh cachestat"
      - name: Run Test 'dc'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh dc"
      - name: Run Test 'fd'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh fd"
      - name: Run Test 'mount'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh mount"
      - name: Run Test 'process'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh process"
      - name: Run Test 'shm'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh shm"
      - name: Run Test 'socket'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh socket"
      - name: Run Test 'swap'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh swap"
      - name: Run Test 'sync'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh sync"
      - name: Run Test 'vfs'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh vfs"
      - name: Run Test 'disk'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh disk"
      - name: Run Test 'hardirq'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh hardirq"
      - name: Run Test 'oomkill'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh oomkill"
      - name: Run Test 'softirq'
        if: always()
        run: |
          vagrant ssh -- -t "cd /vagrant/src/tests && sudo ./run_tests.sh softirq"


# ./filesystem
# ./md
#three_tests=( "cachestat" "dc" "fd" "mount" "process" "shm" "socket" "swap" "sync" "vfs" )
#one_test=( "disk" "hardirq" "oomkill" "softirq" )
#          wget https://raw.githubusercontent.com/Ferroin/netdata/distro-test-keys/.github/data/distros.yml
